<?php

namespace App\UristBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends NestedTreeRepository
{
    /**
     * Все категории в виде дереьевв
     * @return mixed список сущностей категорий
     */
    public function getCategoryList()
    {
        $qb = $this->createQueryBuilder('node')
                   ->select('node.title, node.slug, node.lvl')
                   ->orderBy('node.title', 'ASC')
        ;
        $query = $qb->getQuery();
        $result = $this->buildTree($query->getArrayResult());
       
        return $result;
    }

    /**
     * Получить сущность категории
     * @param $categorySlug slug
     * @return mixed сущность категории
      */
    public function getCategory($categorySlug)
    {
      $qb = $this->createQueryBuilder('c')
                 ->select('c')                
                 ->where('c.slug = (:slug)')
                 ->setParameter(':slug', $categorySlug)
      ;
      $query = $qb->getQuery();
      $result = $query->getOneOrNullResult();
       
      return $result;
    }

    /**
     * Получить список сущностей категорий
     * @param $categorySlugs массив slug
     * @return mixed список сущностей категорий
     */
    public function getCategoryMulti($categorySlugs)
    {
      $qb = $this->createQueryBuilder('c')
                 ->select('c')
                 ->where('c.slug IN (:values)')
                 ->setParameter(':values', $categorySlugs)
      ;
      $query = $qb->getQuery();
      $result = $query->getResult();

      return $result;
    }
}
